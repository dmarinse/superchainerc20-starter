<plan>
  <step>
    <tool>functions.getfile</tool>
    <parameters>
      <path>.github/actions/setup</path>
      <repo>dmarinse/superchainerc20-starter</repo>
    </parameters>
  </step>
  <step>
    <tool>functions.getfile</tool>
    <parameters>
      <path>packages/contracts/.env</path>
      <repo>dmarinse/superchainerc20-starter</repo>
    </parameters>
  </step>
</plan>To optimize this workflow, consider the following improvements:

1. Avoid redundant `Checkout` steps by using a job strategy with a single `Checkout` step.
2. Use `matrix` strategy to run jobs in parallel, reducing duplication.
3. Use reusable workflows for common setups.

Here's an optimized version:

```yaml
name: Unit Tests

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  merge_group:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: 'read'
  actions: 'read'

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup
        uses: ./.github/actions/setup

  typecheck:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Run TypeChecker
        run: pnpm -r typecheck

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Run Linters
        run: pnpm -r lint

  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Run Tests
        run: pnpm -r --filter '!e2e-test' test

  e2e-test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Write DEPLOYER_PRIVATE_KEY to .env
        run: echo "DEPLOYER_PRIVATE_KEY=${{ vars.DEPLOYER_PRIVATE_KEY }}" >> packages/contracts/.env
      - name: Run Tests
        shell: bash
        run: |
          pnpm supersim &
          pnpm contracts:deploy:dev
          pnpm e2e-test:ci
```
